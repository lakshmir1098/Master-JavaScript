{"mappings":"AAAA,SAAS,gBAAgB,CAAC,oBAAoB;IAC1C,IAAI,MACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsGH,CAAC;IAEH,SAAS,cAAc,CAAC,OAAO,SAAS,GAAG;AAC/C","sources":["OOP/oop_script.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\r\n    var oop =\r\n        `<b> 1. How OOP works in JavaScript? </b>\r\n- JavaScript is a prototype-based language. Meaning, objects are linked to a prototype object.\r\n- So, the objects linked can inherit properties and methods from the prototype object. This is called prototypal inheritance/ Delegation.\r\n\r\n<b> 2. 3 ways of implementing Prototypal inheritance </b> \r\n- <b><i>Constructor functions</i></b>\r\n    - Constructor functions are used to create multiple objects with the same properties and methods from a function.\r\n    - Constructor functions are like classes in other languages.\r\n    - The new keyword is used to create objects.\r\n    - The 'this' keyword is used to refer to the current object.\r\n    - This is how built-in Arrays, Maps or Sets are implemented\r\n<div class = \"code\">\r\nconst Person = function (firstName, lastName, birthYear) {\r\n    this.firstName = firstName;\r\n    this.lastName = lastName;\r\n    this.birthYear = birthYear;\r\n\r\n    // we always do this to reate a method\r\n    // this is a bad approach,\r\n    // as it will create a new copy of the function for each object\r\n    // this.calcAge = function () {\r\n    //     return 2025 - this.birthYear;\r\n    // }\r\n}\r\n\r\n//instead do this for Prototypal inheritance\r\nPerson.prototype.calcAge = function () {\r\n    return 2025 - this.birthYear;\r\n}\r\n\r\nconst laks = new Person('Lakshmi', 'Ramachandran', 1998);\r\nconsole.log(laks, laks.calcAge());\r\n// Here, the laks object itself does not have the calcAge method,\r\n// but it is inherited from the prototype object\r\n</div>\r\n- <b><i>Object.create() method</i></b>\r\n    - Easiest and cleanest way to create objects with a prototype.\r\n    - Object.create() method creates a new object with a prototype object.\r\n<div class = \"code\">\r\nconst PersonProto = {\r\n    calcAge() {\r\n        return 2025 - this.birthYear;\r\n    },\r\n\r\n    init(firstName, lastName, birthYear) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.birthYear = birthYear;\r\n    }\r\n}\r\n\r\nconst lak2 = Object.create(PersonProto);\r\n// lak2.firstName = 'Lakshmi';\r\n// lak2.lastName = 'Ramachandran';\r\n// lak2.birthYear = 1998;\r\nlak2.init('Lakshmi', 'Ramachandran', 1998);\r\nlak2.calcAge();\r\n\r\nconsole.log(lak2.__proto__);\r\n\r\nconsole.log(\"laks using object.create()\", lak2, \"age : \", lak2.calcAge());\r\n</div>\r\n- <b><i>ES6 classes</i></b>\r\n    - Morden way of implementing classes in JavaScript.\r\n    - ES6 classes are syntactic sugar for constructor functions.\r\n    - Note that, ES6 classes does not behave like classes in other languages. It is still prototype-based and works exactly like constructor function. \r\n1. class Expression <span class = \"code-one-line\">const Person = class {} </span>\r\n2. class Declaration <span class = \"code-one-line\">class Person {} </span>\r\n<div class = \"code\">\r\nclass PersonCl {\r\n    constructor(firstName, lastName, birthYear) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.birthYear = birthYear;\r\n    }\r\n\r\n    // thisis still inside prototype object\r\n    calcAge() {\r\n        console.log(2025 - this.birthYear);\r\n    }\r\n}\r\n\r\n// this will also work\r\nPersonCl.prototype.greet = function () {\r\n    console.log(\\`Hey $\\{this.firstName}\\`);\r\n}\r\n\r\nconst lak1 = new PersonCl('Lakshmi', 'Ramachandran', 1998);\r\nconsole.log(\"lak1\", lak1);\r\nlak1.calcAge();\r\nlak1.greet();</div>\r\n<i><b>Checking for prototype object in instance object</b></i>\r\nconsole.log(lak1.__proto__);\r\nconsole.log(lak1.__proto__ === PersonCl.prototype); //true\r\n\r\n<div><i><b>NOTE:</b> \r\n* Classes are not hoisted. So, we need to declare the class before using it.\r\n* Classes are first-class citizens in JavaScript. Meaning, we can pass them as arguments, return them from functions, and assign them to variables.\r\n* Classes are executed in strict mode. </i>\r\n\r\n<span class = sub-head> Class Summary </span>\r\n<img src = \"assests/class_summary.png\" alt = \"Class Summary\" class = \"img-center\">\r\n</div>`;\r\n\r\n    document.getElementById(\"oop\").innerHTML = oop;\r\n});\r\n\r\n\r\n"],"names":[],"version":3,"file":"index.3868be92.js.map","sourceRoot":"/__parcel_source_root/"}