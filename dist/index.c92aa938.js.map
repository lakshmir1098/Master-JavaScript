{"mappings":"AAAA,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,IAAI,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCb,CAAC;IACC,SAAS,cAAc,CAAC,OAAO,SAAS,GAAG;AAC7C","sources":["about_js.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\r\n  var abj = `\r\nJavaScript is\r\n<ul><li> HighLevelLanguage</li>\r\n    <ul><li> Developer has minimal work for setup and everything happens automatically through abstractions </li> </ul>\r\n<li>has Garbage collection</li>\r\n    <ul><li>JS has garbage collection done automatically. It removes unused ojects from time to time so it doesnt effects the memory clog</li></ul>\r\n<li>Interpreted or JIT complied</li>\r\n    <ul><li> Entire code is converted into machine code once and executed immediately </li> </ul>\r\n<li> Multi-paradigm</li>\r\n    <ul><li><b>Paradigm</b> - approach of structuring the code, which will direct our style and technique</li>\r\n    <li> 3 popular paradigm are - <ul> <li> Procedureal Programming </li>\r\n                                        <li> OOP Programming </li>\r\n                                        <li> Functional Programming </li>\r\n                                    </ul><li> Most programming languages only one of the following paradigm But JS supports all the 3 styles of coding </li></ul>\r\n<li>Prototype-based onject-oriented</li>\r\n    <ul><li> Everything in JS are objects except for primitive types. Even arrays are objects! in JS</li></ul>\r\n<li> First class functions</li>\r\n    <ul><li> Means, functions are treated as variable in JS. Not all programming lanaguages allows this.</li>\r\n    <li> We can pass functions into another functions are return them from anhter functions\r\n\r\nExample,\r\n<div class= \"code\">\r\n    const model = function(){\r\n    console.log('I'm called');\r\n    }\r\n\r\n    btn.addEventListener(\"clikc\",model); <div> </li> \r\n    \r\n</ul>\r\n<li> Dynamically typed - We dont define the type of the variable </li>\r\n<li> Single threaded </li>\r\n    <ul><li> JS is single threaded, so it can do only on thing at a time </li>\r\n    <li> In this case, if we have long running task, it will block the single thread running. We dont want that </li>\r\n    <li> We can achieve non-blocking by using <b> event loop </b>.</li>\r\n        <ul> <li> It takes the long running taks, executes them in the background and puts them in the main thread once they are finished </li> </ul>\r\n</ul></ul>\r\n\r\n<span class= \"sub-head\">TDZ </span>\r\nTemporal Dead zone. This comes under the mechanism of Hoisting, Where we call a function or variable before declaring them.\r\n<ul><li> For<span class=\"code-word\"> var</span> returns <span class=\"code-word\">undefined.</span>\r\n<li> But <span class=\"code-word\">let, const</span> return an error. This is because, the JS reads the code and store them in TDZ until it is intitialized.\r\n`;\r\n  document.getElementById(\"abj\").innerHTML = abj;\r\n});\r\n"],"names":[],"version":3,"file":"index.c92aa938.js.map","sourceRoot":"/__parcel_source_root/"}