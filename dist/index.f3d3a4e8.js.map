{"mappings":"AAAA;AACA,SAAS,gBAAgB,CAAC,oBAAoB;IAC1C,SAAS;QACL,IAAI,UACA,CAAC;;;;;;;oGAOuF,CAAC;QAE7F,SAAS,cAAc,CAAC,WAAW,SAAS,GAAG;IACnD;IAEA,SAAS;QACL,IAAI,OACA,CAAC;;;;;;;;gCAQmB,CAAC;QAEzB,SAAS,cAAc,CAAC,QAAQ,SAAS,GAAG;IAChD;IAEA,SAAS;QACL,IAAI,UAAU,CAAC;;;;;;;;;;;MAWjB,CAAC;QACC,SAAS,cAAc,CAAC,WAAW,SAAS,GAAG;IACnD;IAEA,SAAS;QACL,IAAI,eAAe,CAAC;;;qGAGyE,CAAC;QAC9F,SAAS,cAAc,CAAC,gBAAgB,SAAS,GAAG;IACxD;IAEA,SAAS;QACL,IAAI,QAAQ,CAAC;;;;;;;;;;;;;;wBAcG,CAAC;QACjB,SAAS,cAAc,CAAC,SAAS,SAAS,GAAG;IACjD;IAEA,SAAS;QACL,IAAI,OACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEb,CAAC;QACO,SAAS,cAAc,CAAC,QAAQ,SAAS,GAAG;IAChD;IAEA,SAAS;QACL,IAAI,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwDf,CAAC;QACC,SAAS,cAAc,CAAC,SAAS,SAAS,GAAG;IACjD;IAGA,SAAS;QACL,IAAI,KAAK,CAAC,gFAAgF,CAAC;QAE3F,SAAS,cAAc,CAAC,MAAM,SAAS,GAAG;IAC9C;IAEA,SAAS;QACL,IAAI,SACA,CAAC;;;;;YAKD,CAAC;QACL,SAAS,cAAc,CAAC,UAAU,SAAS,GAAG;IAClD;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACJ","sources":["basic_script.js"],"sourcesContent":["\"use strict\";\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    function tcandtc() {\r\n        var tcandtc =\r\n            `    Number to String ==> String(23)\r\n    String to Number ==> Number(23)\r\n    Like this we can use the into datatype(variable) to do type conversion.\r\n\r\n    For eg. '1' + 1 //11 ==> here concatination is performed\r\n    but '10' - 1 //9 ==> here arithmetci sub operation is performed\r\n\r\n    So, except for + other arthm operation like -,*,/ will perform mathematical operation on string `;\r\n\r\n        document.getElementById(\"tcandtc\").innerHTML = tcandtc;\r\n    }\r\n\r\n    function torf() {\r\n        var torf =\r\n            `    There are only 6 falsy values in JS. They are: \r\n            * 0\r\n            * empty string ' '\r\n            * undefined\r\n            * null\r\n            * Nan\r\n            * False\r\n            \r\n        All othe values are true`;\r\n\r\n        document.getElementById(\"torf\").innerHTML = torf;\r\n    }\r\n\r\n    function nullish() {\r\n        var nullish = ` \r\n    Nullish values are null and undefined.\r\n    <i>Example </i>\r\n<div class = 'code'>\r\n    const a = 0;\r\n    const num1 = a || 10;\r\n    console.log(num1); // 10 as 0 is falsy value\r\n    //But \r\n\r\n    const num2 =  a ?? 10;\r\n    console.log(num2); //0 as 0 is not nullish number\r\n</div>`;\r\n        document.getElementById(\"nullish\").innerHTML = nullish;\r\n    }\r\n\r\n    function math_methods() {\r\n        var math_methods = `<ul><li><b>Math.random()</b> -> generates decimal number between 0 and 1.</li>\r\n    <li><b>Math.random() * 20 </b>-> generates decimal number between 0 and 19.999 </li>\r\n    <li><b>Math.trunc(Math.random()*20) </b> -> cuts the decimal and rounds the number between 0 and 19 </li>\r\n    <li><b>Math.trunc(Math.random()*20) + 1 </b>-> generates whole number between 1 and 20 </li></ul>`;\r\n        document.getElementById(\"math_methods\").innerHTML = math_methods;\r\n    }\r\n\r\n    function forof() {\r\n        var forof = `<div class = 'code'>\r\n    const add = function(...num){\r\n    let sum = 0;\r\n    for(const i of num){ //uses of instead of in\r\n        sum = sum + i;\r\n    }\r\n    console.log(sum);\r\n    }\r\n\r\n    //When in is used\r\n    //for(const i in num){ \r\n    //    sum = sum + num[i];\r\n    //}\r\n    add(2,3);\r\n    add(5,6,7,7); </div>`;\r\n        document.getElementById(\"forof\").innerHTML = forof;\r\n    }\r\n\r\n    function maps() {\r\n        var maps =\r\n            `    Map is an key value pair datastructue.\r\n<span class ='sub-sub-head'>&#128640; Creating map </span>\r\n<div class = 'code'>\r\n    const maps = new Map([\r\n        [\"a\",[1,2,3]],\r\n        [1, ['a','b','c']]\r\n    ]);\r\n\r\n    maps\r\n        .set(true, 'You are allowed')\r\n        .set(false, 'you are not allowed')\r\n\r\n    console.log(maps);\r\n</div>\r\n<span class ='sub-sub-head'>&#128640; Accessing elements in map </span>\r\n<div class = 'code'>\r\n    const maps = new Map();\r\n\r\n    maps\r\n        .set (\"a\",[1,2,3])\r\n        .set(1, ['a','b','c'])\r\n        .set(true, 'You are allowed')\r\n        .set(false, 'you are not allowed')\r\n        .set ('lt', 10)\r\n        .set ('gt', 1)\r\n\r\n    console.log( maps.get(1));  //['a','b','c']\r\n\r\n    const t = 4;\r\n    console.log(maps.get( t < maps.get('lt') && t > maps.get('gt'))); // You are allowed\r\n</div>map's length can be found by<span class = \"code-word\"> maps.size </span>\r\nmap has <span class = \"code-word\">has</span> property to check if the key is present to return the vaulues.\r\n\r\n<span class ='sub-sub-head'>&#128640; Converting objects into Map </span>\r\n<div class ='code'>\r\n    const days = ['mon', 'tue', 'wed', 'thur', 'fri', 'sat', 'sun'];\r\n    const resturant = {\r\n        openingHours : {\r\n            [days[0]] : { //enhanced object literal\r\n                open : 5,\r\n                close : 5\r\n            },\r\n            [days[1]] : {\r\n                open :10 ,\r\n                close :5\r\n            },\r\n            [days[2]] : {\r\n                open :13,\r\n                close :6\r\n            },\r\n            [days[3]]:{\r\n                open :6,\r\n                close:10\r\n            }\r\n        },\r\n    }\r\n    const maps = new Map (Object.entries(resturant.openingHours))\r\n    console.log(maps);\r\n</div>\r\n<span class ='sub-sub-head'>&#128640; Converting Map into array </span>\r\n<div class ='code'>\r\n    console.log([...maps.get('a')]);\r\n</div>\r\n<span class ='sub-sub-head'>&#128640; Accessing Maps </span>\r\n    Using <span class ='code-word'> keys, values, entries </span> properties\r\n<div class ='code'>\r\n    console.log(maps.entries());\r\n    console.log(maps.keys());\r\n    console.log(maps.values())\r\n</div>\r\n`;\r\n        document.getElementById(\"maps\").innerHTML = maps;\r\n    }\r\n\r\n    function dates() {\r\n        var dates = `<div class = 'code'>\r\n    const now = new Date();\r\n    console.log(now);\r\n    //Tue Dec 03 2024 18:32:55 GMT+0530 (India Standard Time)\r\n\r\n    console.log(new Date ('May 13, 2024'))\r\n    // 4 Mon May 13 2024 00:00:00 GMT+0530 (India Standard Time)\r\n\r\n\r\n    console.log(new Date(2024,9,10,6,37,54));  // year , month starts at 0 , Date starts at 1, hours, min, sec\r\n    // Thu Oct 10 2024 06:37:00 GMT+0530 (India Standard Time)\r\n\r\n    const date = new Date (2024,11,15,11,30);\r\n    console.log(\"a\",date.getFullYear());  //2024\r\n    console.log(\"b\",date.getMonth()); //11\r\n    console.log(\"c\",date.getDate()); //15\r\n    console.log(\"d\",date.getDay()); //0  => as it is Sunday\r\n    console.log(\"e\",date.getHours()); //11\r\n    console.log(\"f\",date.getMinutes()); //30\r\n    console.log(\"g\",date.getSeconds()); //0\r\n    console.log(\"h\",date.getUTCSeconds()); //0\r\n    console.log(\"i\",date.toString());  // Sun Dec 15 2024 11:30:00 GMT+0530 (India Standard Time)\r\n    console.log(\"j\",date.toISOString()); //2024-12-15T06:00:00.000Z\r\n    console.log(\"k\",date.toUTCString()); //Sun, 15 Dec 2024 06:00:00 GMT\r\n    console.log(\"l\",date.toDateString()); //Sun Dec 15 2024\r\n    console.log(\"m\",date.toLocaleDateString()); //15/12/2024\r\n    console.log(\"n\",date.toLocaleString()); //15/12/2024, 11:30:00 am\r\n    console.log(\"o\",date.toTimeString()); //11:30:00 GMT+0530 (India Standard Time)\r\n    console.log(\"p\",date.toLocaleTimeString()); //11:30:00 am\r\n\r\n    const time_set = date.getTime()\r\n    console.log(\"q\",time_set); // to set a timeset which can be further used to get the exact date //1734242400000\r\n    console.log(\"r\",new Date (time_set)); //2024-12-15T06:00:00.000Z\r\n    console.log(\"s\",Date.now()) //1733328886925\r\n</div>\r\n<span class ='sub-sub-head'>   Internalization of Dates </span>\r\n<div class = 'code'>\r\n    const now1 = new Date();\r\n    const options = { // without this Intl.DateTimeFormat will only show date and this gives us lot of options on how to display\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    day: 'numeric',\r\n    month: 'numeric',\r\n    year: 'numeric',\r\n    weekday: 'short',\r\n    };\r\n\r\n    console.log(new Intl.DateTimeFormat(\r\n    'en-IN',\r\n    options\r\n    ).format(now1));\r\n\r\n    // this is to get local machine time,but works only on browser side not on vs code. \r\n    //try in dev tool console\r\n    const locale = navigator.language; \r\n    console.log(\"locale\",locale);\r\n</div>`;\r\n        document.getElementById(\"dates\").innerHTML = dates;\r\n    }\r\n\r\n\r\n    function da() {\r\n        var da = `<div><img src=\"assests/defer_async.png\" alt=\"regular vs differ vs async\" ></div>`;\r\n\r\n        document.getElementById(\"da\").innerHTML = da;\r\n    }\r\n\r\n    function timers() {\r\n        var timers =\r\n            `  There are 2 timers method:\r\n        1.  setTimeOut - run once\r\n        clearTimeOut\r\n        2.  setInterval - keeps running until we stop it\r\n        clearInterval\r\n            `;\r\n        document.getElementById(\"timers\").innerHTML = timers;\r\n    }\r\n\r\n    tcandtc();\r\n    torf();\r\n    nullish();\r\n    math_methods();\r\n    forof();\r\n    maps();\r\n    dates();\r\n    da();\r\n    timers();\r\n});\r\n"],"names":[],"version":3,"file":"index.f3d3a4e8.js.map","sourceRoot":"/__parcel_source_root/"}